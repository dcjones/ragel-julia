
void julia_tok_list( TL: host::tok* )
{
	for Tok: host::tok in repeat(TL) {
		if match Tok [host::`${ StmtList: stmt* host::`}$] {
			julia_stmt_list( StmtList )
        }
		elsif match Tok [host::`={ Expr: expr host::`}=] {
			julia_expr( Expr )
        }
		elsif match Tok ["{"] {
			send Output "begin
        }
        else if match Tok ["}"] {
            send Output "end
        }
		else {
			send Output [Tok]
        }
	}
}

void julia_expr_factor( ExprFactor: expr_factor )
{
	if match ExprFactor
		[`$ string uint `{ TL: host::tok* host::`}$]
	{
		julia_tok_list( TL )
		send Output ["\n"]
	}
	elsif match ExprFactor
		[`= string uint `{ TL: host::tok* host::`}$]
	{
		julia_tok_list( TL )
	}
	elsif match ExprFactor
		[O:`( TL: expr C: `)]
	{
		send Output [O]
		julia_expr( TL )
		send Output [C]
	}
	elsif match ExprFactor
		[ident O: `[ TL: expr C: `]]
	{
		send Output [ExprFactor.ident O] '1 + '
		julia_expr( TL )
		send Output [C]
	}
	elsif match ExprFactor
		[`offset `( ident `, expr `)]
	{
		send Output ['int(']
		julia_expr( ExprFactor.expr )
		send Output [')']
	}
	elsif match ExprFactor
		['deref' '(' ident ',' expr ')']
	{
        # NOTE: making indexing 1-based here.'
		send Output [ ExprFactor.ident '[1 + ']
		julia_expr( ExprFactor.expr )
		send Output [']']
	}
	elsif match ExprFactor
			[T: `TRUE]
	{
		T.data = 'true'
		send Output [T]
	}
	elsif match ExprFactor
			[F: `FALSE]
	{
		F.data = 'false'
		send Output [F]
	}
	elsif match ExprFactor
			[N: `nil]
	{
		N.data = '0'
		send Output [N]
	}
	else {
		# Catches cases not specified
		send Output [ExprFactor]
	}
}

void julia_expr_ptr( ExprPtr: expr_ptr )
{
    # TODO: None of this makes any sense to me. There are no arrows in Julia,
    # but I do nothing to strip them, since go does the same thing. I'm not
    # sure if it matters.
	if match ExprPtr [expr_ptr Arrow: `-> expr_factor]
	{
		julia_expr_ptr( ExprPtr._expr_ptr )
		send Output [Arrow]
		julia_expr_factor( ExprPtr.expr_factor )
	}
	elsif match ExprPtr [Star: `* expr_ptr]
	{
		send Output [Star]
		julia_expr_ptr( ExprPtr._expr_ptr )
	}
	elsif match ExprPtr [PP: `++ expr_ptr]
	{
		julia_expr_ptr( ExprPtr._expr_ptr )
        send Output " += 1
	}
	elsif match ExprPtr [MM: `-- expr_ptr]
	{
		julia_expr_ptr( ExprPtr._expr_ptr )
        send Output " -= 1
	}
	elsif match ExprPtr [expr_ptr PP: `++]
	{
		julia_expr_ptr( ExprPtr._expr_ptr )
        send Output " += 1
	}
	elsif match ExprPtr [expr_ptr MM: `--]
	{
		julia_expr_ptr( ExprPtr._expr_ptr )
        send Output " -= 1
	}
	elsif match ExprPtr ['(' Type: type ')' expr_ptr]
	{
		send Output ['convert(']
		julia_type( Type )
        send Output [',']
		julia_expr_ptr( ExprPtr._expr_ptr )
		send Output [')']
	}
	elsif match ExprPtr [expr_factor]
	{
		julia_expr_factor( ExprPtr.expr_factor )
	}
	else {
		send Output [ExprPtr]
	}
}

void julia_expr_factor_op( ExprFactorOp: expr_factor_op )
{
	if match ExprFactorOp [B: `! expr_factor_op]
	{
		send Output [B]
		julia_expr_factor_op( ExprFactorOp._expr_factor_op )
	}
	elsif match ExprFactorOp [T: `~ expr_factor_op]
	{
		send Output ['~']
		julia_expr_factor_op( ExprFactorOp._expr_factor_op )
	}
	elsif match ExprFactorOp [expr_ptr]
	{
		julia_expr_ptr( ExprFactorOp.expr_ptr )
	}
}

void julia_expr_bitwise( ExprBitwise: expr_bitwise )
{
	if match ExprBitwise [expr_bitwise A: `& expr_factor_op]
	{
		julia_expr_bitwise( ExprBitwise._expr_bitwise )
		send Output [A]
		julia_expr_factor_op( ExprBitwise.expr_factor_op )
	}
	elsif match ExprBitwise [expr_factor_op]
	{
		julia_expr_factor_op( ExprBitwise.expr_factor_op )
	}
}

void julia_expr_mult( ExprMult: expr_mult )
{
	if match ExprMult [expr_mult T: `* expr_bitwise]
	{
		julia_expr_mult( ExprMult._expr_mult )
		send Output [T]
		julia_expr_bitwise( ExprMult.expr_bitwise )
	}
	elsif match ExprMult [expr_bitwise]
	{
		julia_expr_bitwise( ExprMult.expr_bitwise )
	}
}

void julia_expr_add( ExprAdd: expr_add )
{
	if match ExprAdd [expr_add Op: add_op expr_mult]
	{
		julia_expr_add( ExprAdd._expr_add )
		send Output [Op]
		julia_expr_mult( ExprAdd.expr_mult )
	}
	elsif match ExprAdd [expr_mult]
	{
		julia_expr_mult( ExprAdd.expr_mult )
	}
}

void julia_expr_shift( ExprShift: expr_shift )
{
	if match ExprShift [expr_shift Op: shift_op expr_add]
	{
		julia_expr_shift( ExprShift._expr_shift )
		send Output [Op]
		julia_expr_add( ExprShift.expr_add )
	}
	elsif match ExprShift [expr_add]
	{
		julia_expr_add( ExprShift.expr_add )
	}
}

void julia_expr_test( ExprTest: expr_test )
{
	if match ExprTest [expr_test Op: test_op expr_shift]
	{
		julia_expr_test( ExprTest._expr_test )
		send Output [Op]
		julia_expr_shift( ExprTest.expr_shift )
	}
	elsif match ExprTest [expr_shift]
	{
		julia_expr_shift( ExprTest.expr_shift )
	}
}

void julia_expr_cond( ExprCond: expr_cond )
{
	julia_expr_test( ExprCond.expr_test )
}

void julia_expr_assign( ExprAssign: expr_assign )
{
	if match ExprAssign [expr_assign Op: assign_op expr_cond]
	{
		julia_expr_assign( ExprAssign._expr_assign )
		send Output [Op]
		julia_expr_cond( ExprAssign.expr_cond )
	}
	elsif match ExprAssign [expr_cond]
	{
		julia_expr_cond( ExprAssign.expr_cond )
	}
}

void julia_expr( Expr: expr )
{
	julia_expr_assign( Expr.expr_assign )
}

void julia_type( Type: type )
{
    if match Type "s8"
        send Output ['Int8 ']
    elsif match Type "s16"
        send Output ['Int16 ']
    elsif match Type "s32"
        send Output ['Int32 ']
    elsif match Type "s64"
        send Output ['Int64 ']
    elsif match Type "s128"
        send Output ['Int128 ']
    elsif match Type "uint"
        send Output ['Uint ']
    elsif match Type "int"
        send Output ['Int ']
    else
        send Output [Type]
}

void julia_num_list( NumList: num_list )
{
	julia_num( NumList.number )
	for CommaNum: comma_num in NumList {
		send Output [', ']
		julia_num( CommaNum.number )
	}
}

void julia_num( Number: number )
{
	if match Number [sint 'u']
		send Output [Number.uint.sint]
	else
		send Output [Number]
}


void julia_stmt ( Stmt: stmt )
{
	if match Stmt
		['$' string uint '{' TL: host::tok* host::`}$]
    {
		julia_tok_list( TL )
		send Output "
    }
	elsif match Stmt
		['=' string uint '{' TL: host::tok* host::`}$]
	{
		julia_tok_list( TL )
	}
    elsif match Stmt [Label: goto_label] {
        send Output
            "@label [Label.ident]
    }
    elsif match Stmt [`goto Label: ident `;] {
        send Output
            "@goto [Label]
    }
	elsif match Stmt [Array: array] {
        send Output
            "[Array.ident] = [julia_type(Array.type)] "
                "\[ [Array.num_list] \]
    }
	elsif match Stmt [Value: value] {
		send Output
			"[Value.value_pass.ident] :: "
                "[julia_type(Value.value_pass.type)] = [Value.value_pass.number]
	}
	elsif match Stmt [
			'if' O: `( IfExpr: expr C: `) IfStmt: stmt
			ElseIfClauseList: else_if_clause* ElseClauseOpt: else_clause?
	] {
        send Output
            "if [julia_expr(IfExpr)]
            "    [julia_stmt(IfStmt)]

		for ElseIfClause: else_if_clause in repeat( ElseIfClauseList ) {
			match ElseIfClause
				['else if (' ElseIfExpr: expr ')' ElseIfStmt: stmt]

			send Output
				"elseif ( [julia_expr(ElseIfExpr)] )
				"    [julia_stmt(ElseIfStmt)]
		}

		if ( match ElseClauseOpt ['else' ElseStmt: stmt] ) {
			send Output
				"else
				"    [julia_stmt(ElseStmt)]
		}

        send Output
            "end
    }
	elsif match Stmt ['while' '(' WhileExpr: expr ')' WhileStmt: stmt] {
		send Output
			"while ( [julia_expr(WhileExpr)] )
			"    [julia_stmt(WhileStmt)]
            "end
    }
	elsif match Stmt
        ['switch' '(' SwitchExpr: expr ')''{' StmtList: stmt* '}'] {

        send Output
            "@switch [julia_expr(SwitchExpr)] begin

        for CaseStmt: stmt in repeat (StmtList) {
            if match CaseStmt [`case CaseExpr: expr `:] {
                send Output
                    "@case [julia_expr(CaseExpr)]
            }
            else {
                julia_stmt(CaseStmt)
            }
        }

        send Output
            "end
    }
	elsif match Stmt [ExprExpr: expr Semi: `;] {
		send Output
			[julia_expr(ExprExpr) Semi]
	}
	elsif match Stmt [L: `{ TL: stmt* R: `}] {
		send Output
            "begin
			[julia_stmt_list(TL)]
            "end
	}
	elsif match Stmt [D: declaration]
	{
		if match D.opt_init ['=' Expr: expr] {
            send Output
                "[D.ident] '::' [julia_type(D.type)]"
			send Output
				"  = [julia_expr(Expr)]"
            send Output ['\n']
		}
	}
	elsif match Stmt [export_stmt]
	{
		send Output
			"#define  [Stmt.export_stmt.ident] [Stmt.export_stmt.number]
	}
	elsif match Stmt ['fallthrough' ';']
	{
        # no need to do anything
	}
	elsif match Stmt [index_stmt]
	{
		send Output
			"[Stmt.index_stmt.ident] = 0
	}
	else {
		# catches unspecified cases
		send Output [Stmt]
	}
}

void julia_stmt_list( StmtList: stmt* )
{
	for Stmt: stmt in repeat( StmtList )
		julia_stmt( Stmt )
}
